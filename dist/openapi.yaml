openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  /v1/users:
    get:
      operationId: listUsers
      summary: List all users
      description: Retrieve a paginated list of users
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      operationId: createUser
      summary: Create a new user
      description: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: newuser@example.com
                name:
                  type: string
                  example: Jane Smith
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /v1/users/details:
    get:
      operationId: getUserById
      summary: Get user by ID
      description: Retrieve a specific user by their unique identifier
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/user-id'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      operationId: updateUser
      summary: Update user information
      description: Update an existing user's information
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/user-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Updated
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      operationId: deleteUser
      summary: Delete a user
      description: Delete a user account permanently
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/user-id'
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    Error:
      $ref: '#/components/schemas/error'
    User:
      $ref: '#/components/schemas/user'
    user:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          description: Unique user identifier
          example: user_123abc
        email:
          type: string
          format: email
          description: User's email address
          example: john.doe@example.com
        name:
          type: string
          description: User's full name
          example: John Doe
    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message
          example: The request contains invalid data
  parameters:
    UserId:
      $ref: '#/components/parameters/user-id'
    user-id:
      name: userId
      in: path
      required: true
      description: Unique identifier for the user
      schema:
        type: string
        pattern: ^user_[a-zA-Z0-9]+$
      example: user_123abc
